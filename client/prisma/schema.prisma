// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String  @unique
  username      String?
  email         String  @unique
  walletAddress String? @unique
  bio           String?
  profileImage  String?
  coverImage    String?

  // Social links
  twitter   String?
  instagram String?
  website   String?

  // Collections created by user
  collections Collection[] @relation("CreatedBy")

  // NFTs owned by user
  ownedNFTs NFT[] @relation("OwnedBy")

  // NFTs created by user
  createdNFTs NFT[] @relation("CreatedBy")

  // Activity tracking
  totalVolume Float @default(0)
  totalSales  Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bid       Bid[]
}

model Collection {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  contractAddress String   @unique
  symbol          String
  coverImage      String?
  bannerImage     String?
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @db.ObjectId

  // Collection statistics
  floorPrice  Float?
  totalVolume Float? @default(0)
  totalSales  Int    @default(0)

  // Creator info
  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  // NFTs in collection
  nfts NFT[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NFT {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  tokenId         Int
  name            String
  description     String?
  image           String
  contractAddress String

  // Metadata
  attributes Json?

  // Collection reference
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @db.ObjectId

  // Creator and Owner
  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String @db.ObjectId
  owner     User   @relation("OwnedBy", fields: [ownerId], references: [id])
  ownerId   String @db.ObjectId

  // Listing info
  listingDetails Listing?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contractAddress, tokenId])
}

model Listing {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  price          Float
  isAuction      Boolean       @default(false)
  auctionEndTime DateTime?
  status         ListingStatus @default(ACTIVE) // ACTIVE, SOLD, CANCELLED

  // NFT reference
  nft   NFT    @relation(fields: [nftId], references: [id])
  nftId String @unique @db.ObjectId

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  history   ListingHistory[]
  bid       Bid[]
}

model Category {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  description String?
  collections Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED
  EXPIRED
}

model ListingHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String   @db.ObjectId
  event     String // LISTED, PRICE_UPDATED, SOLD, CANCELLED
  price     Float
  from      String? // wallet address
  to        String? // wallet address
  timestamp DateTime @default(now())
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String   @db.ObjectId
  bidder    User     @relation(fields: [bidderId], references: [id])
  bidderId  String   @db.ObjectId
  amount    Float
  timestamp DateTime @default(now())
}
